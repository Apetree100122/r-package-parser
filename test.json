{"name":"R6Class","title":"Create an R6 reference object generator","pagetitle":"Create an R6 reference object generator â€” R6Class","source":"Source: <a href='https://github.com/r-lib/R6/blob/HEAD/R/r6_class.R'><code>R/r6_class.R<\/code><\/a>","filename":"R6Class.Rd","author":[],"aliases":["R6Class","R6"],"keywords":[],"description":"<p>R6 objects are essentially environments, structured in a way that makes them\nlook like an object in a more typical object-oriented language than R. They\nsupport public and private members, as well as inheritance across different\npackages.<\/p>","opengraph":{"description":"R6 objects are essentially environments, structured in a way that makes them\nlook like an object in a more typical object-oriented language than R. They\nsupport public and private members, as well as inheritance across different\npackages."},"usage":{"title":"Usage","contents":"<div class='sourceCode'><pre class='sourceCode r'><code><span class='kw'>R6Class<\/span><span class='op'>(<\/span>classname <span class='op'>=<\/span> <span class='cn'>NULL<\/span>, public <span class='op'>=<\/span> <span class='fu'><a href='https://rdrr.io/r/base/list.html'>list<\/a><\/span><span class='op'>(<\/span><span class='op'>)<\/span>, private <span class='op'>=<\/span> <span class='cn'>NULL<\/span>,\n  active <span class='op'>=<\/span> <span class='cn'>NULL<\/span>, inherit <span class='op'>=<\/span> <span class='cn'>NULL<\/span>, lock_objects <span class='op'>=<\/span> <span class='cn'>TRUE<\/span>, class <span class='op'>=<\/span> <span class='cn'>TRUE<\/span>,\n  portable <span class='op'>=<\/span> <span class='cn'>TRUE<\/span>, lock_class <span class='op'>=<\/span> <span class='cn'>FALSE<\/span>, cloneable <span class='op'>=<\/span> <span class='cn'>TRUE<\/span>,\n  parent_env <span class='op'>=<\/span> <span class='fu'><a href='https://rdrr.io/r/base/sys.parent.html'>parent.frame<\/a><\/span><span class='op'>(<\/span><span class='op'>)<\/span>, <span class='va'>lock<\/span><span class='op'>)<\/span><\/code><\/pre><\/div>"},"examples":"<div class='sourceCode'><pre class='sourceCode r'><code><span class='co'># A queue ---------------------------------------------------------<\/span>\n<span class='va'>Queue<\/span> <span class='op'>&lt;-<\/span> <span class='kw'>R6Class<\/span><span class='op'>(<\/span><span class='st'>\"Queue\"<\/span>,\n  public <span class='op'>=<\/span> <span class='fu'><a href='https://rdrr.io/r/base/list.html'>list<\/a><\/span><span class='op'>(<\/span>\n    initialize <span class='op'>=<\/span> <span class='kw'>function<\/span><span class='op'>(<\/span><span class='va'>...<\/span><span class='op'>)<\/span> <span class='op'>{<\/span>\n      <span class='kw'>for<\/span> <span class='op'>(<\/span><span class='va'>item<\/span> <span class='kw'>in<\/span> <span class='fu'><a href='https://rdrr.io/r/base/list.html'>list<\/a><\/span><span class='op'>(<\/span><span class='va'>...<\/span><span class='op'>)<\/span><span class='op'>)<\/span> <span class='op'>{<\/span>\n        <span class='va'>self<\/span><span class='op'>$<\/span><span class='fu'>add<\/span><span class='op'>(<\/span><span class='va'>item<\/span><span class='op'>)<\/span>\n      <span class='op'>}<\/span>\n    <span class='op'>}<\/span>,\n    add <span class='op'>=<\/span> <span class='kw'>function<\/span><span class='op'>(<\/span><span class='va'>x<\/span><span class='op'>)<\/span> <span class='op'>{<\/span>\n      <span class='va'>private<\/span><span class='op'>$<\/span><span class='va'>queue<\/span> <span class='op'>&lt;-<\/span> <span class='fu'><a href='https://rdrr.io/r/base/c.html'>c<\/a><\/span><span class='op'>(<\/span><span class='va'>private<\/span><span class='op'>$<\/span><span class='va'>queue<\/span>, <span class='fu'><a href='https://rdrr.io/r/base/list.html'>list<\/a><\/span><span class='op'>(<\/span><span class='va'>x<\/span><span class='op'>)<\/span><span class='op'>)<\/span>\n      <span class='fu'><a href='https://rdrr.io/r/base/invisible.html'>invisible<\/a><\/span><span class='op'>(<\/span><span class='va'>self<\/span><span class='op'>)<\/span>\n    <span class='op'>}<\/span>,\n    remove <span class='op'>=<\/span> <span class='kw'>function<\/span><span class='op'>(<\/span><span class='op'>)<\/span> <span class='op'>{<\/span>\n      <span class='kw'>if<\/span> <span class='op'>(<\/span><span class='va'>private<\/span><span class='op'>$<\/span><span class='fu'>length<\/span><span class='op'>(<\/span><span class='op'>)<\/span> <span class='op'>==<\/span> <span class='fl'>0<\/span><span class='op'>)<\/span> <span class='kw'><a href='https://rdrr.io/r/base/function.html'>return<\/a><\/span><span class='op'>(<\/span><span class='cn'>NULL<\/span><span class='op'>)<\/span>\n      <span class='co'># Can use private$queue for explicit access<\/span>\n      <span class='va'>head<\/span> <span class='op'>&lt;-<\/span> <span class='va'>private<\/span><span class='op'>$<\/span><span class='va'>queue<\/span><span class='op'>[[<\/span><span class='fl'>1<\/span><span class='op'>]<\/span><span class='op'>]<\/span>\n      <span class='va'>private<\/span><span class='op'>$<\/span><span class='va'>queue<\/span> <span class='op'>&lt;-<\/span> <span class='va'>private<\/span><span class='op'>$<\/span><span class='va'>queue<\/span><span class='op'>[<\/span><span class='op'>-<\/span><span class='fl'>1<\/span><span class='op'>]<\/span>\n      <span class='va'>head<\/span>\n    <span class='op'>}<\/span>\n  <span class='op'>)<\/span>,\n  private <span class='op'>=<\/span> <span class='fu'><a href='https://rdrr.io/r/base/list.html'>list<\/a><\/span><span class='op'>(<\/span>\n    queue <span class='op'>=<\/span> <span class='fu'><a href='https://rdrr.io/r/base/list.html'>list<\/a><\/span><span class='op'>(<\/span><span class='op'>)<\/span>,\n    length <span class='op'>=<\/span> <span class='kw'>function<\/span><span class='op'>(<\/span><span class='op'>)<\/span> <span class='fu'>base<\/span><span class='fu'>::<\/span><span class='fu'><a href='https://rdrr.io/r/base/length.html'>length<\/a><\/span><span class='op'>(<\/span><span class='va'>private<\/span><span class='op'>$<\/span><span class='va'>queue<\/span><span class='op'>)<\/span>\n  <span class='op'>)<\/span>\n<span class='op'>)<\/span>\n\n<span class='va'>q<\/span> <span class='op'>&lt;-<\/span> <span class='va'>Queue<\/span><span class='op'>$<\/span><span class='fu'>new<\/span><span class='op'>(<\/span><span class='fl'>5<\/span>, <span class='fl'>6<\/span>, <span class='st'>\"foo\"<\/span><span class='op'>)<\/span>\n\n<span class='co'># Add and remove items<\/span>\n<span class='va'>q<\/span><span class='op'>$<\/span><span class='fu'>add<\/span><span class='op'>(<\/span><span class='st'>\"something\"<\/span><span class='op'>)<\/span>\n<span class='va'>q<\/span><span class='op'>$<\/span><span class='fu'>add<\/span><span class='op'>(<\/span><span class='st'>\"another thing\"<\/span><span class='op'>)<\/span>\n<span class='va'>q<\/span><span class='op'>$<\/span><span class='fu'>add<\/span><span class='op'>(<\/span><span class='fl'>17<\/span><span class='op'>)<\/span>\n<span class='va'>q<\/span><span class='op'>$<\/span><span class='fu'>remove<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='co'>#&gt; [1] 5<\/span>\n<span class='va'>q<\/span><span class='op'>$<\/span><span class='fu'>remove<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='co'>#&gt; [1] 6<\/span>\n\n<span class='co'># Private members can't be accessed directly<\/span>\n<span class='va'>q<\/span><span class='op'>$<\/span><span class='va'>queue<\/span>\n<span class='co'>#&gt; NULL<\/span>\n<span class='co'># q$length()<\/span>\n<span class='co'>#&gt; Error: attempt to apply non-function<\/span>\n\n<span class='co'># add() returns self, so it can be chained<\/span>\n<span class='va'>q<\/span><span class='op'>$<\/span><span class='fu'>add<\/span><span class='op'>(<\/span><span class='fl'>10<\/span><span class='op'>)<\/span><span class='op'>$<\/span><span class='fu'>add<\/span><span class='op'>(<\/span><span class='fl'>11<\/span><span class='op'>)<\/span><span class='op'>$<\/span><span class='fu'>add<\/span><span class='op'>(<\/span><span class='fl'>12<\/span><span class='op'>)<\/span>\n\n<span class='co'># remove() returns the value removed, so it's not chainable<\/span>\n<span class='va'>q<\/span><span class='op'>$<\/span><span class='fu'>remove<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='co'>#&gt; [1] \"foo\"<\/span>\n<span class='va'>q<\/span><span class='op'>$<\/span><span class='fu'>remove<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='co'>#&gt; [1] \"something\"<\/span>\n<span class='va'>q<\/span><span class='op'>$<\/span><span class='fu'>remove<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='co'>#&gt; [1] \"another thing\"<\/span>\n<span class='va'>q<\/span><span class='op'>$<\/span><span class='fu'>remove<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='co'>#&gt; [1] 17<\/span>\n\n\n<span class='co'># Active bindings -------------------------------------------------<\/span>\n<span class='va'>Numbers<\/span> <span class='op'>&lt;-<\/span> <span class='kw'>R6Class<\/span><span class='op'>(<\/span><span class='st'>\"Numbers\"<\/span>,\n  public <span class='op'>=<\/span> <span class='fu'><a href='https://rdrr.io/r/base/list.html'>list<\/a><\/span><span class='op'>(<\/span>\n    x <span class='op'>=<\/span> <span class='fl'>100<\/span>\n  <span class='op'>)<\/span>,\n  active <span class='op'>=<\/span> <span class='fu'><a href='https://rdrr.io/r/base/list.html'>list<\/a><\/span><span class='op'>(<\/span>\n    x2 <span class='op'>=<\/span> <span class='kw'>function<\/span><span class='op'>(<\/span><span class='va'>value<\/span><span class='op'>)<\/span> <span class='op'>{<\/span>\n      <span class='kw'>if<\/span> <span class='op'>(<\/span><span class='fu'><a href='https://rdrr.io/r/base/missing.html'>missing<\/a><\/span><span class='op'>(<\/span><span class='va'>value<\/span><span class='op'>)<\/span><span class='op'>)<\/span> <span class='kw'><a href='https://rdrr.io/r/base/function.html'>return<\/a><\/span><span class='op'>(<\/span><span class='va'>self<\/span><span class='op'>$<\/span><span class='va'>x<\/span> <span class='op'>*<\/span> <span class='fl'>2<\/span><span class='op'>)<\/span>\n      <span class='kw'>else<\/span> <span class='va'>self<\/span><span class='op'>$<\/span><span class='va'>x<\/span> <span class='op'>&lt;-<\/span> <span class='va'>value<\/span><span class='op'>/<\/span><span class='fl'>2<\/span>\n    <span class='op'>}<\/span>,\n    rand <span class='op'>=<\/span> <span class='kw'>function<\/span><span class='op'>(<\/span><span class='op'>)<\/span> <span class='fu'><a href='https://rdrr.io/r/stats/Normal.html'>rnorm<\/a><\/span><span class='op'>(<\/span><span class='fl'>1<\/span><span class='op'>)<\/span>\n  <span class='op'>)<\/span>\n<span class='op'>)<\/span>\n\n<span class='va'>n<\/span> <span class='op'>&lt;-<\/span> <span class='va'>Numbers<\/span><span class='op'>$<\/span><span class='fu'>new<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='va'>n<\/span><span class='op'>$<\/span><span class='va'>x<\/span>\n<span class='co'>#&gt; [1] 100<\/span>\n<span class='va'>n<\/span><span class='op'>$<\/span><span class='va'>x2<\/span>\n<span class='co'>#&gt; [1] 200<\/span>\n<span class='va'>n<\/span><span class='op'>$<\/span><span class='va'>x2<\/span> <span class='op'>&lt;-<\/span> <span class='fl'>1000<\/span>\n<span class='va'>n<\/span><span class='op'>$<\/span><span class='va'>x<\/span>\n<span class='co'>#&gt; [1] 500<\/span>\n\n<span class='co'># If the function takes no arguments, it's not possible to use it with &lt;-:<\/span>\n<span class='va'>n<\/span><span class='op'>$<\/span><span class='va'>rand<\/span>\n<span class='co'>#&gt; [1] 0.2648<\/span>\n<span class='va'>n<\/span><span class='op'>$<\/span><span class='va'>rand<\/span>\n<span class='co'>#&gt; [1] 2.171<\/span>\n<span class='co'># n$rand &lt;- 3<\/span>\n<span class='co'>#&gt; Error: unused argument (quote(3))<\/span>\n\n\n<span class='co'># Inheritance -----------------------------------------------------<\/span>\n<span class='co'># Note that this isn't very efficient - it's just for illustrating inheritance.<\/span>\n<span class='va'>HistoryQueue<\/span> <span class='op'>&lt;-<\/span> <span class='kw'>R6Class<\/span><span class='op'>(<\/span><span class='st'>\"HistoryQueue\"<\/span>,\n  inherit <span class='op'>=<\/span> <span class='va'>Queue<\/span>,\n  public <span class='op'>=<\/span> <span class='fu'><a href='https://rdrr.io/r/base/list.html'>list<\/a><\/span><span class='op'>(<\/span>\n    show <span class='op'>=<\/span> <span class='kw'>function<\/span><span class='op'>(<\/span><span class='op'>)<\/span> <span class='op'>{<\/span>\n      <span class='fu'><a href='https://rdrr.io/r/base/cat.html'>cat<\/a><\/span><span class='op'>(<\/span><span class='st'>\"Next item is at index\"<\/span>, <span class='va'>private<\/span><span class='op'>$<\/span><span class='va'>head_idx<\/span> <span class='op'>+<\/span> <span class='fl'>1<\/span>, <span class='st'>\"\\n\"<\/span><span class='op'>)<\/span>\n      <span class='kw'>for<\/span> <span class='op'>(<\/span><span class='va'>i<\/span> <span class='kw'>in<\/span> <span class='fu'><a href='https://rdrr.io/r/base/seq.html'>seq_along<\/a><\/span><span class='op'>(<\/span><span class='va'>private<\/span><span class='op'>$<\/span><span class='va'>queue<\/span><span class='op'>)<\/span><span class='op'>)<\/span> <span class='op'>{<\/span>\n        <span class='fu'><a href='https://rdrr.io/r/base/cat.html'>cat<\/a><\/span><span class='op'>(<\/span><span class='va'>i<\/span>, <span class='st'>\": \"<\/span>, <span class='va'>private<\/span><span class='op'>$<\/span><span class='va'>queue<\/span><span class='op'>[[<\/span><span class='va'>i<\/span><span class='op'>]<\/span><span class='op'>]<\/span>, <span class='st'>\"\\n\"<\/span>, sep <span class='op'>=<\/span> <span class='st'>\"\"<\/span><span class='op'>)<\/span>\n      <span class='op'>}<\/span>\n    <span class='op'>}<\/span>,\n    remove <span class='op'>=<\/span> <span class='kw'>function<\/span><span class='op'>(<\/span><span class='op'>)<\/span> <span class='op'>{<\/span>\n      <span class='kw'>if<\/span> <span class='op'>(<\/span><span class='va'>private<\/span><span class='op'>$<\/span><span class='fu'>length<\/span><span class='op'>(<\/span><span class='op'>)<\/span> <span class='op'>-<\/span> <span class='va'>private<\/span><span class='op'>$<\/span><span class='va'>head_idx<\/span> <span class='op'>==<\/span> <span class='fl'>0<\/span><span class='op'>)<\/span> <span class='kw'><a href='https://rdrr.io/r/base/function.html'>return<\/a><\/span><span class='op'>(<\/span><span class='cn'>NULL<\/span><span class='op'>)<\/span>\n      <span class='va'>private<\/span><span class='op'>$<\/span><span class='va'>head_idx<\/span> <span class='op'>&lt;&lt;-<\/span> <span class='va'>private<\/span><span class='op'>$<\/span><span class='va'>head_idx<\/span> <span class='op'>+<\/span> <span class='fl'>1<\/span>\n      <span class='va'>private<\/span><span class='op'>$<\/span><span class='va'>queue<\/span><span class='op'>[[<\/span><span class='va'>private<\/span><span class='op'>$<\/span><span class='va'>head_idx<\/span><span class='op'>]<\/span><span class='op'>]<\/span>\n    <span class='op'>}<\/span>\n  <span class='op'>)<\/span>,\n  private <span class='op'>=<\/span> <span class='fu'><a href='https://rdrr.io/r/base/list.html'>list<\/a><\/span><span class='op'>(<\/span>\n    head_idx <span class='op'>=<\/span> <span class='fl'>0<\/span>\n  <span class='op'>)<\/span>\n<span class='op'>)<\/span>\n\n<span class='va'>hq<\/span> <span class='op'>&lt;-<\/span> <span class='va'>HistoryQueue<\/span><span class='op'>$<\/span><span class='fu'>new<\/span><span class='op'>(<\/span><span class='fl'>5<\/span>, <span class='fl'>6<\/span>, <span class='st'>\"foo\"<\/span><span class='op'>)<\/span>\n<span class='va'>hq<\/span><span class='op'>$<\/span><span class='fu'>show<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='co'>#&gt; Next item is at index 1<\/span>\n<span class='co'>#&gt; 1: 5<\/span>\n<span class='co'>#&gt; 2: 6<\/span>\n<span class='co'>#&gt; 3: foo<\/span>\n<span class='va'>hq<\/span><span class='op'>$<\/span><span class='fu'>remove<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='co'>#&gt; [1] 5<\/span>\n<span class='va'>hq<\/span><span class='op'>$<\/span><span class='fu'>show<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='co'>#&gt; Next item is at index 2<\/span>\n<span class='co'>#&gt; 1: 5<\/span>\n<span class='co'>#&gt; 2: 6<\/span>\n<span class='co'>#&gt; 3: foo<\/span>\n<span class='va'>hq<\/span><span class='op'>$<\/span><span class='fu'>remove<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='co'>#&gt; [1] 6<\/span>\n\n\n\n<span class='co'># Calling superclass methods with super$ --------------------------<\/span>\n<span class='va'>CountingQueue<\/span> <span class='op'>&lt;-<\/span> <span class='kw'>R6Class<\/span><span class='op'>(<\/span><span class='st'>\"CountingQueue\"<\/span>,\n  inherit <span class='op'>=<\/span> <span class='va'>Queue<\/span>,\n  public <span class='op'>=<\/span> <span class='fu'><a href='https://rdrr.io/r/base/list.html'>list<\/a><\/span><span class='op'>(<\/span>\n    add <span class='op'>=<\/span> <span class='kw'>function<\/span><span class='op'>(<\/span><span class='va'>x<\/span><span class='op'>)<\/span> <span class='op'>{<\/span>\n      <span class='va'>private<\/span><span class='op'>$<\/span><span class='va'>total<\/span> <span class='op'>&lt;&lt;-<\/span> <span class='va'>private<\/span><span class='op'>$<\/span><span class='va'>total<\/span> <span class='op'>+<\/span> <span class='fl'>1<\/span>\n      <span class='va'>super<\/span><span class='op'>$<\/span><span class='fu'>add<\/span><span class='op'>(<\/span><span class='va'>x<\/span><span class='op'>)<\/span>\n    <span class='op'>}<\/span>,\n    get_total <span class='op'>=<\/span> <span class='kw'>function<\/span><span class='op'>(<\/span><span class='op'>)<\/span> <span class='va'>private<\/span><span class='op'>$<\/span><span class='va'>total<\/span>\n  <span class='op'>)<\/span>,\n  private <span class='op'>=<\/span> <span class='fu'><a href='https://rdrr.io/r/base/list.html'>list<\/a><\/span><span class='op'>(<\/span>\n    total <span class='op'>=<\/span> <span class='fl'>0<\/span>\n  <span class='op'>)<\/span>\n<span class='op'>)<\/span>\n\n<span class='va'>cq<\/span> <span class='op'>&lt;-<\/span> <span class='va'>CountingQueue<\/span><span class='op'>$<\/span><span class='fu'>new<\/span><span class='op'>(<\/span><span class='st'>\"x\"<\/span>, <span class='st'>\"y\"<\/span><span class='op'>)<\/span>\n<span class='va'>cq<\/span><span class='op'>$<\/span><span class='fu'>get_total<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='co'>#&gt; [1] 2<\/span>\n<span class='va'>cq<\/span><span class='op'>$<\/span><span class='fu'>add<\/span><span class='op'>(<\/span><span class='st'>\"z\"<\/span><span class='op'>)<\/span>\n<span class='va'>cq<\/span><span class='op'>$<\/span><span class='fu'>remove<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='co'>#&gt; [1] \"x\"<\/span>\n<span class='va'>cq<\/span><span class='op'>$<\/span><span class='fu'>remove<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='co'>#&gt; [1] \"y\"<\/span>\n<span class='va'>cq<\/span><span class='op'>$<\/span><span class='fu'>get_total<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='co'>#&gt; [1] 3<\/span>\n\n\n<span class='co'># Non-portable classes --------------------------------------------<\/span>\n<span class='co'># By default, R6 classes are portable, which means they can be inherited<\/span>\n<span class='co'># across different packages. Portable classes require using self$ and<\/span>\n<span class='co'># private$ to access members.<\/span>\n<span class='co'># When used in non-portable mode, members can be accessed without self$,<\/span>\n<span class='co'># and assignments can be made with &lt;&lt;-.<\/span>\n\n<span class='va'>NP<\/span> <span class='op'>&lt;-<\/span> <span class='kw'>R6Class<\/span><span class='op'>(<\/span><span class='st'>\"NP\"<\/span>,\n  portable <span class='op'>=<\/span> <span class='cn'>FALSE<\/span>,\n  public <span class='op'>=<\/span> <span class='fu'><a href='https://rdrr.io/r/base/list.html'>list<\/a><\/span><span class='op'>(<\/span>\n    x <span class='op'>=<\/span> <span class='cn'>NA<\/span>,\n    getx <span class='op'>=<\/span> <span class='kw'>function<\/span><span class='op'>(<\/span><span class='op'>)<\/span> <span class='va'>x<\/span>,\n    setx <span class='op'>=<\/span> <span class='kw'>function<\/span><span class='op'>(<\/span><span class='va'>value<\/span><span class='op'>)<\/span> <span class='va'>x<\/span> <span class='op'>&lt;&lt;-<\/span> <span class='va'>value<\/span>\n  <span class='op'>)<\/span>\n<span class='op'>)<\/span>\n\n<span class='va'>np<\/span> <span class='op'>&lt;-<\/span> <span class='va'>NP<\/span><span class='op'>$<\/span><span class='fu'>new<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='va'>np<\/span><span class='op'>$<\/span><span class='fu'>setx<\/span><span class='op'>(<\/span><span class='fl'>10<\/span><span class='op'>)<\/span>\n<span class='va'>np<\/span><span class='op'>$<\/span><span class='fu'>getx<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='co'>#&gt; [1] 10<\/span>\n\n<span class='co'># Setting new values ----------------------------------------------<\/span>\n<span class='co'># It is possible to add new members to the class after it has been created,<\/span>\n<span class='co'># by using the $set() method on the generator.<\/span>\n\n<span class='va'>Simple<\/span> <span class='op'>&lt;-<\/span> <span class='kw'>R6Class<\/span><span class='op'>(<\/span><span class='st'>\"Simple\"<\/span>,\n  public <span class='op'>=<\/span> <span class='fu'><a href='https://rdrr.io/r/base/list.html'>list<\/a><\/span><span class='op'>(<\/span>\n    x <span class='op'>=<\/span> <span class='fl'>1<\/span>,\n    getx <span class='op'>=<\/span> <span class='kw'>function<\/span><span class='op'>(<\/span><span class='op'>)<\/span> <span class='va'>self<\/span><span class='op'>$<\/span><span class='va'>x<\/span>\n  <span class='op'>)<\/span>\n<span class='op'>)<\/span>\n\n<span class='va'>Simple<\/span><span class='op'>$<\/span><span class='fu'>set<\/span><span class='op'>(<\/span><span class='st'>\"public\"<\/span>, <span class='st'>\"getx2\"<\/span>, <span class='kw'>function<\/span><span class='op'>(<\/span><span class='op'>)<\/span> <span class='va'>self<\/span><span class='op'>$<\/span><span class='va'>x<\/span><span class='op'>*<\/span><span class='fl'>2<\/span><span class='op'>)<\/span>\n\n<span class='co'># Use overwrite = TRUE to overwrite existing values<\/span>\n<span class='va'>Simple<\/span><span class='op'>$<\/span><span class='fu'>set<\/span><span class='op'>(<\/span><span class='st'>\"public\"<\/span>, <span class='st'>\"x\"<\/span>, <span class='fl'>10<\/span>, overwrite <span class='op'>=<\/span> <span class='cn'>TRUE<\/span><span class='op'>)<\/span>\n\n<span class='va'>s<\/span> <span class='op'>&lt;-<\/span> <span class='va'>Simple<\/span><span class='op'>$<\/span><span class='fu'>new<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='va'>s<\/span><span class='op'>$<\/span><span class='va'>x<\/span>\n<span class='va'>s<\/span><span class='op'>$<\/span><span class='fu'>getx2<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n\n\n<span class='co'># Cloning objects -------------------------------------------------<\/span>\n<span class='va'>a<\/span> <span class='op'>&lt;-<\/span> <span class='va'>Queue<\/span><span class='op'>$<\/span><span class='fu'>new<\/span><span class='op'>(<\/span><span class='fl'>5<\/span>, <span class='fl'>6<\/span><span class='op'>)<\/span>\n<span class='va'>a<\/span><span class='op'>$<\/span><span class='fu'>remove<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='co'>#&gt; [1] 5<\/span>\n\n<span class='co'># Clone a. New object gets a's state.<\/span>\n<span class='va'>b<\/span> <span class='op'>&lt;-<\/span> <span class='va'>a<\/span><span class='op'>$<\/span><span class='fu'>clone<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n\n<span class='co'># Can add to each queue separately now.<\/span>\n<span class='va'>a<\/span><span class='op'>$<\/span><span class='fu'>add<\/span><span class='op'>(<\/span><span class='fl'>10<\/span><span class='op'>)<\/span>\n<span class='va'>b<\/span><span class='op'>$<\/span><span class='fu'>add<\/span><span class='op'>(<\/span><span class='fl'>20<\/span><span class='op'>)<\/span>\n\n<span class='va'>a<\/span><span class='op'>$<\/span><span class='fu'>remove<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='co'>#&gt; [1] 6<\/span>\n<span class='va'>a<\/span><span class='op'>$<\/span><span class='fu'>remove<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='co'>#&gt; [1] 10<\/span>\n\n<span class='va'>b<\/span><span class='op'>$<\/span><span class='fu'>remove<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='co'>#&gt; [1] 6<\/span>\n<span class='va'>b<\/span><span class='op'>$<\/span><span class='fu'>remove<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='co'>#&gt; [1] 20<\/span>\n\n\n<span class='co'># Deep clones -----------------------------------------------------<\/span>\n\n<span class='va'>Simple<\/span> <span class='op'>&lt;-<\/span> <span class='kw'>R6Class<\/span><span class='op'>(<\/span><span class='st'>\"Simple\"<\/span>,\n public <span class='op'>=<\/span> <span class='fu'><a href='https://rdrr.io/r/base/list.html'>list<\/a><\/span><span class='op'>(<\/span>\n   x <span class='op'>=<\/span> <span class='cn'>NULL<\/span>,\n   initialize <span class='op'>=<\/span> <span class='kw'>function<\/span><span class='op'>(<\/span><span class='va'>val<\/span><span class='op'>)<\/span> <span class='va'>self<\/span><span class='op'>$<\/span><span class='va'>x<\/span> <span class='op'>&lt;-<\/span> <span class='va'>val<\/span>\n <span class='op'>)<\/span>\n<span class='op'>)<\/span>\n\n<span class='va'>Cloner<\/span> <span class='op'>&lt;-<\/span> <span class='kw'>R6Class<\/span><span class='op'>(<\/span><span class='st'>\"Cloner\"<\/span>,\n  public <span class='op'>=<\/span> <span class='fu'><a href='https://rdrr.io/r/base/list.html'>list<\/a><\/span><span class='op'>(<\/span>\n    s <span class='op'>=<\/span> <span class='cn'>NULL<\/span>,\n    y <span class='op'>=<\/span> <span class='fl'>1<\/span>,\n    initialize <span class='op'>=<\/span> <span class='kw'>function<\/span><span class='op'>(<\/span><span class='op'>)<\/span> <span class='va'>self<\/span><span class='op'>$<\/span><span class='va'>s<\/span> <span class='op'>&lt;-<\/span> <span class='va'>Simple<\/span><span class='op'>$<\/span><span class='fu'>new<\/span><span class='op'>(<\/span><span class='fl'>1<\/span><span class='op'>)<\/span>\n  <span class='op'>)<\/span>\n<span class='op'>)<\/span>\n\n<span class='va'>a<\/span> <span class='op'>&lt;-<\/span> <span class='va'>Cloner<\/span><span class='op'>$<\/span><span class='fu'>new<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='va'>b<\/span> <span class='op'>&lt;-<\/span> <span class='va'>a<\/span><span class='op'>$<\/span><span class='fu'>clone<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='va'>c<\/span> <span class='op'>&lt;-<\/span> <span class='va'>a<\/span><span class='op'>$<\/span><span class='fu'>clone<\/span><span class='op'>(<\/span>deep <span class='op'>=<\/span> <span class='cn'>TRUE<\/span><span class='op'>)<\/span>\n\n<span class='co'># Modify a<\/span>\n<span class='va'>a<\/span><span class='op'>$<\/span><span class='va'>s<\/span><span class='op'>$<\/span><span class='va'>x<\/span> <span class='op'>&lt;-<\/span> <span class='fl'>2<\/span>\n<span class='va'>a<\/span><span class='op'>$<\/span><span class='va'>y<\/span> <span class='op'>&lt;-<\/span> <span class='fl'>2<\/span>\n\n<span class='co'># b is a shallow clone. b$s is the same as a$s because they are R6 objects.<\/span>\n<span class='va'>b<\/span><span class='op'>$<\/span><span class='va'>s<\/span><span class='op'>$<\/span><span class='va'>x<\/span>\n<span class='co'>#&gt; [1] 2<\/span>\n<span class='co'># But a$y and b$y are different, because y is just a value.<\/span>\n<span class='va'>b<\/span><span class='op'>$<\/span><span class='va'>y<\/span>\n<span class='co'>#&gt; [1] 1<\/span>\n\n<span class='co'># c is a deep clone, so c$s is not the same as a$s.<\/span>\n<span class='va'>c<\/span><span class='op'>$<\/span><span class='va'>s<\/span><span class='op'>$<\/span><span class='va'>x<\/span>\n<span class='co'>#&gt; [1] 1<\/span>\n<span class='va'>c<\/span><span class='op'>$<\/span><span class='va'>y<\/span>\n<span class='co'>#&gt; [1] 1<\/span>\n\n\n<span class='co'># Deep clones with custom deep_clone method -----------------------<\/span>\n\n<span class='va'>CustomCloner<\/span> <span class='op'>&lt;-<\/span> <span class='kw'>R6Class<\/span><span class='op'>(<\/span><span class='st'>\"CustomCloner\"<\/span>,\n  public <span class='op'>=<\/span> <span class='fu'><a href='https://rdrr.io/r/base/list.html'>list<\/a><\/span><span class='op'>(<\/span>\n    e <span class='op'>=<\/span> <span class='cn'>NULL<\/span>,\n    s1 <span class='op'>=<\/span> <span class='cn'>NULL<\/span>,\n    s2 <span class='op'>=<\/span> <span class='cn'>NULL<\/span>,\n    s3 <span class='op'>=<\/span> <span class='cn'>NULL<\/span>,\n    initialize <span class='op'>=<\/span> <span class='kw'>function<\/span><span class='op'>(<\/span><span class='op'>)<\/span> <span class='op'>{<\/span>\n      <span class='va'>self<\/span><span class='op'>$<\/span><span class='va'>e<\/span> <span class='op'>&lt;-<\/span> <span class='fu'><a href='https://rdrr.io/r/base/environment.html'>new.env<\/a><\/span><span class='op'>(<\/span>parent <span class='op'>=<\/span> <span class='fu'><a href='https://rdrr.io/r/base/environment.html'>emptyenv<\/a><\/span><span class='op'>(<\/span><span class='op'>)<\/span><span class='op'>)<\/span>\n      <span class='va'>self<\/span><span class='op'>$<\/span><span class='va'>e<\/span><span class='op'>$<\/span><span class='va'>x<\/span> <span class='op'>&lt;-<\/span> <span class='fl'>1<\/span>\n      <span class='va'>self<\/span><span class='op'>$<\/span><span class='va'>s1<\/span> <span class='op'>&lt;-<\/span> <span class='va'>Simple<\/span><span class='op'>$<\/span><span class='fu'>new<\/span><span class='op'>(<\/span><span class='fl'>1<\/span><span class='op'>)<\/span>\n      <span class='va'>self<\/span><span class='op'>$<\/span><span class='va'>s2<\/span> <span class='op'>&lt;-<\/span> <span class='va'>Simple<\/span><span class='op'>$<\/span><span class='fu'>new<\/span><span class='op'>(<\/span><span class='fl'>1<\/span><span class='op'>)<\/span>\n      <span class='va'>self<\/span><span class='op'>$<\/span><span class='va'>s3<\/span> <span class='op'>&lt;-<\/span> <span class='va'>Simple<\/span><span class='op'>$<\/span><span class='fu'>new<\/span><span class='op'>(<\/span><span class='fl'>1<\/span><span class='op'>)<\/span>\n    <span class='op'>}<\/span>\n  <span class='op'>)<\/span>,\n  private <span class='op'>=<\/span> <span class='fu'><a href='https://rdrr.io/r/base/list.html'>list<\/a><\/span><span class='op'>(<\/span>\n    <span class='co'># When x$clone(deep=TRUE) is called, the deep_clone gets invoked once for<\/span>\n    <span class='co'># each field, with the name and value.<\/span>\n    deep_clone <span class='op'>=<\/span> <span class='kw'>function<\/span><span class='op'>(<\/span><span class='va'>name<\/span>, <span class='va'>value<\/span><span class='op'>)<\/span> <span class='op'>{<\/span>\n      <span class='kw'>if<\/span> <span class='op'>(<\/span><span class='va'>name<\/span> <span class='op'>==<\/span> <span class='st'>\"e\"<\/span><span class='op'>)<\/span> <span class='op'>{<\/span>\n        <span class='co'># e1 is an environment, so use this quick way of copying<\/span>\n        <span class='fu'><a href='https://rdrr.io/r/base/list2env.html'>list2env<\/a><\/span><span class='op'>(<\/span><span class='fu'><a href='https://rdrr.io/r/base/list.html'>as.list.environment<\/a><\/span><span class='op'>(<\/span><span class='va'>value<\/span>, all.names <span class='op'>=<\/span> <span class='cn'>TRUE<\/span><span class='op'>)<\/span>,\n                 parent <span class='op'>=<\/span> <span class='fu'><a href='https://rdrr.io/r/base/environment.html'>emptyenv<\/a><\/span><span class='op'>(<\/span><span class='op'>)<\/span><span class='op'>)<\/span>\n\n      <span class='op'>}<\/span> <span class='kw'>else<\/span> <span class='kw'>if<\/span> <span class='op'>(<\/span><span class='va'>name<\/span> <span class='op'><a href='https://rdrr.io/r/base/match.html'>%in%<\/a><\/span> <span class='fu'><a href='https://rdrr.io/r/base/c.html'>c<\/a><\/span><span class='op'>(<\/span><span class='st'>\"s1\"<\/span>, <span class='st'>\"s2\"<\/span><span class='op'>)<\/span><span class='op'>)<\/span> <span class='op'>{<\/span>\n        <span class='co'># s1 and s2 are R6 objects which we can clone<\/span>\n        <span class='va'>value<\/span><span class='op'>$<\/span><span class='fu'>clone<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n\n      <span class='op'>}<\/span> <span class='kw'>else<\/span> <span class='op'>{<\/span>\n        <span class='co'># For everything else, just return it. This results in a shallow<\/span>\n        <span class='co'># copy of s3.<\/span>\n        <span class='va'>value<\/span>\n      <span class='op'>}<\/span>\n    <span class='op'>}<\/span>\n  <span class='op'>)<\/span>\n<span class='op'>)<\/span>\n\n<span class='va'>a<\/span> <span class='op'>&lt;-<\/span> <span class='va'>CustomCloner<\/span><span class='op'>$<\/span><span class='fu'>new<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='va'>b<\/span> <span class='op'>&lt;-<\/span> <span class='va'>a<\/span><span class='op'>$<\/span><span class='fu'>clone<\/span><span class='op'>(<\/span>deep <span class='op'>=<\/span> <span class='cn'>TRUE<\/span><span class='op'>)<\/span>\n\n<span class='co'># Change some values in a's fields<\/span>\n<span class='va'>a<\/span><span class='op'>$<\/span><span class='va'>e<\/span><span class='op'>$<\/span><span class='va'>x<\/span> <span class='op'>&lt;-<\/span> <span class='fl'>2<\/span>\n<span class='va'>a<\/span><span class='op'>$<\/span><span class='va'>s1<\/span><span class='op'>$<\/span><span class='va'>x<\/span> <span class='op'>&lt;-<\/span> <span class='fl'>3<\/span>\n<span class='va'>a<\/span><span class='op'>$<\/span><span class='va'>s2<\/span><span class='op'>$<\/span><span class='va'>x<\/span> <span class='op'>&lt;-<\/span> <span class='fl'>4<\/span>\n<span class='va'>a<\/span><span class='op'>$<\/span><span class='va'>s3<\/span><span class='op'>$<\/span><span class='va'>x<\/span> <span class='op'>&lt;-<\/span> <span class='fl'>5<\/span>\n\n<span class='co'># b has copies of e, s1, and s2, but shares the same s3<\/span>\n<span class='va'>b<\/span><span class='op'>$<\/span><span class='va'>e<\/span><span class='op'>$<\/span><span class='va'>x<\/span>\n<span class='co'>#&gt; [1] 1<\/span>\n<span class='va'>b<\/span><span class='op'>$<\/span><span class='va'>s1<\/span><span class='op'>$<\/span><span class='va'>x<\/span>\n<span class='co'>#&gt; [1] 1<\/span>\n<span class='va'>b<\/span><span class='op'>$<\/span><span class='va'>s2<\/span><span class='op'>$<\/span><span class='va'>x<\/span>\n<span class='co'>#&gt; [1] 1<\/span>\n<span class='va'>b<\/span><span class='op'>$<\/span><span class='va'>s3<\/span><span class='op'>$<\/span><span class='va'>x<\/span>\n<span class='co'>#&gt; [1] 5<\/span>\n\n\n<span class='co'># Debugging -------------------------------------------------------<\/span>\n<span class='kw'>if<\/span> <span class='op'>(<\/span><span class='cn'>FALSE<\/span><span class='op'>)<\/span> <span class='op'>{<\/span>\n<span class='co'># This will enable debugging the getx() method for objects of the 'Simple'<\/span>\n<span class='co'># class that are instantiated in the future.<\/span>\n<span class='va'>Simple<\/span><span class='op'>$<\/span><span class='fu'>debug<\/span><span class='op'>(<\/span><span class='st'>\"getx\"<\/span><span class='op'>)<\/span>\n<span class='va'>s<\/span> <span class='op'>&lt;-<\/span> <span class='va'>Simple<\/span><span class='op'>$<\/span><span class='fu'>new<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='va'>s<\/span><span class='op'>$<\/span><span class='fu'>getx<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n\n<span class='co'># Disable debugging for future instances:<\/span>\n<span class='va'>Simple<\/span><span class='op'>$<\/span><span class='fu'>undebug<\/span><span class='op'>(<\/span><span class='st'>\"getx\"<\/span><span class='op'>)<\/span>\n<span class='va'>s<\/span> <span class='op'>&lt;-<\/span> <span class='va'>Simple<\/span><span class='op'>$<\/span><span class='fu'>new<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='va'>s<\/span><span class='op'>$<\/span><span class='fu'>getx<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n\n<span class='co'># To enable and disable debugging for a method in a single instance of an<\/span>\n<span class='co'># R6 object (this will not affect other objects):<\/span>\n<span class='va'>s<\/span> <span class='op'>&lt;-<\/span> <span class='va'>Simple<\/span><span class='op'>$<\/span><span class='fu'>new<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='fu'><a href='https://rdrr.io/r/base/debug.html'>debug<\/a><\/span><span class='op'>(<\/span><span class='va'>s<\/span><span class='op'>$<\/span><span class='va'>getx<\/span><span class='op'>)<\/span>\n<span class='va'>s<\/span><span class='op'>$<\/span><span class='fu'>getx<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='fu'><a href='https://rdrr.io/r/base/debug.html'>undebug<\/a><\/span><span class='op'>(<\/span><span class='va'>s<\/span><span class='op'>$<\/span><span class='va'>getx<\/span><span class='op'>)<\/span>\n<span class='op'>}<\/span>\n<\/code><\/pre><\/div>","sections":[{"title":"Arguments","contents":"<dl>\n\n<dt>classname<\/dt>\n<dd><p>Name of the class. The class name is useful primarily for S3\nmethod dispatch.<\/p><\/dd>\n\n\n<dt>public<\/dt>\n<dd><p>A list of public members, which can be functions (methods) and\nnon-functions (fields).<\/p><\/dd>\n\n\n<dt>private<\/dt>\n<dd><p>An optional list of private members, which can be functions\nand non-functions.<\/p><\/dd>\n\n\n<dt>active<\/dt>\n<dd><p>An optional list of active binding functions.<\/p><\/dd>\n\n\n<dt>inherit<\/dt>\n<dd><p>A R6ClassGenerator object to inherit from; in other words, a\nsuperclass. This is captured as an unevaluated expression which is\nevaluated in <code>parent_env<\/code> each time an object is instantiated.<\/p><\/dd>\n\n\n<dt>lock_objects<\/dt>\n<dd><p>Should the environments of the generated objects be\nlocked? If locked, new members can't be added to the objects.<\/p><\/dd>\n\n\n<dt>class<\/dt>\n<dd><p>Should a class attribute be added to the object? Default is\n<code>TRUE<\/code>. If <code>FALSE<\/code>, the objects will simply look like\nenvironments, which is what they are.<\/p><\/dd>\n\n\n<dt>portable<\/dt>\n<dd><p>If <code>TRUE<\/code> (the default), this class will work with\ninheritance across different packages. Note that when this is enabled,\nfields and members must be accessed with  <code>self$x<\/code> or\n<code>private$x<\/code>; they can't be accessed with just <code>x<\/code>.<\/p><\/dd>\n\n\n<dt>lock_class<\/dt>\n<dd><p>If <code>TRUE<\/code>, it won't be possible to add more members to\nthe generator object with <code>$set<\/code>. If <code>FALSE<\/code> (the default), then\nit will be possible to add more members with <code>$set<\/code>. The methods\n<code>$is_locked<\/code>, <code>$lock<\/code>, and <code>$unlock<\/code> can be used to query\nand change the locked state of the class.<\/p><\/dd>\n\n\n<dt>cloneable<\/dt>\n<dd><p>If <code>TRUE<\/code> (the default), the generated objects will\nhave method named <code>$clone<\/code>, which makes a copy of the object.<\/p><\/dd>\n\n\n<dt>parent_env<\/dt>\n<dd><p>An environment to use as the parent of newly-created\nobjects.<\/p><\/dd>\n\n\n<dt>lock<\/dt>\n<dd><p>Deprecated as of version 2.1; use <code>lock_class<\/code> instead.<\/p><\/dd>\n\n<\/dl>"},{"title":"The <code>print<\/code> method","contents":"\n\n\n<p>R6 object generators and R6 objects have a default <code>print<\/code> method to\n  show them on the screen: they simply list the members and parameters (e.g.\n  lock_objects, portable, etc., see above) of the object.<\/p>\n<p>The default <code>print<\/code> method of R6 objects can be redefined, by\n  supplying a public <code>print<\/code> method. (<code>print<\/code> members that are not\n  functions are ignored.) This method is automatically called whenever the\n  object is printed, e.g. when the object's name is typed at the command\n  prompt, or when <code>print(obj)<\/code> is called. It can also be called directly\n  via <code>obj$print()<\/code>. All extra arguments from a <code>print(obj, ...)<\/code>\n  call are passed on to the <code>obj$print(...)<\/code> method.<\/p>"},{"title":"Portable and non-portable classes","contents":"\n\n\n<p>When R6 classes are portable (the default), they can be inherited across\n  packages without complication. However, when in portable mode, members must\n  be accessed with <code>self<\/code> and <code>private<\/code>, as in <code>self$x<\/code> and\n  <code>private$y<\/code>.<\/p>\n<p>When used in non-portable mode, R6 classes behave more like reference\n  classes: inheritance across packages will not work well, and <code>self<\/code>\n  and <code>private<\/code> are not necessary for accessing fields.<\/p>"},{"title":"Cloning objects","contents":"\n\n\n<p>R6 objects have a method named <code>clone<\/code> by default. To disable this,\n  use <code>cloneable=FALSE<\/code>. Having the <code>clone<\/code> method present will\n  slightly increase the memory footprint of R6 objects, but since the method\n  will be shared across all R6 objects, the memory use will be negligible.<\/p>\n<p>By default, calling <code>x$clone()<\/code> on an R6 object will result in a\n  shallow clone. That is, if any fields have reference semantics\n  (environments, R6, or reference class objects), they will not be copied;\n  instead, the clone object will have a field that simply refers to the same\n  object.<\/p>\n<p>To make a deep copy, you can use <code>x$clone(deep=TRUE)<\/code>. With this\n  option, any fields that are R6 objects will also be cloned; however,\n  environments and reference class objects will not be.<\/p>\n<p>If you want different deep copying behavior, you can supply your own\n  private method called <code>deep_clone<\/code>. This method will be called for\n  each field in the object, with two arguments: <code>name<\/code>, which is the\n  name of the field, and <code>value<\/code>, which is the value. Whatever the\n  method returns will be used as the value for the field in the new clone\n  object. You can write a <code>deep_clone<\/code> method that makes copies of\n  specific fields, whether they are environments, R6 objects, or reference\n  class objects.<\/p>"},{"title":"S3 details","contents":"\n\n\n<p>Normally the public environment will have two classes: the one supplied in\n  the <code>classname<\/code> argument, and <code>\"R6\"<\/code>. It is possible to get the\n  public environment with no classes, by using <code>class=FALSE<\/code>. This will\n  result in faster access speeds by avoiding class-based dispatch of\n  <code>$<\/code>. The benefit is is negligible in most cases.<\/p>\n<p>If a class is a subclass of another, the object will have as its classes\n  the <code>classname<\/code>, the superclass's <code>classname<\/code>, and <code>\"R6\"<\/code><\/p>\n<p>The primary difference in behavior when <code>class=FALSE<\/code> is that, without\n  a class attribute, it won't be possible to use S3 methods with the objects.\n  So, for example, pretty printing (with <code>print.R6Class<\/code>) won't be used.<\/p>"}],"details":"<p>An R6 object consists of a public environment, and may also contain a private\nenvironment, as well as environments for superclasses. In one sense, the\nobject and the public environment are the same; a reference to the object is\nidentical to a reference to the public environment. But in another sense, the\nobject also consists of the fields, methods, private environment and so on.<\/p>\n<p>The <code>active<\/code> argument is a list of active binding functions. These\nfunctions take one argument. They look like regular variables, but when\naccessed, a function is called with an optional argument. For example, if\n<code>obj$x2<\/code> is an active binding, then when accessed as <code>obj$x2<\/code>, it\ncalls the <code>x2()<\/code> function that was in the <code>active<\/code> list, with no\narguments. However, if a value is assigned to it, as in <code>obj$x2 &lt;- 50<\/code>,\nthen the function is called with the right-side value as its argument, as in\n<code>x2(50)<\/code>. See <code><a href='https://rdrr.io/r/base/bindenv.html'>makeActiveBinding<\/a><\/code> for more information.<\/p>\n<p>If the public or private lists contain any items that have reference\nsemantics (for example, an environment), those items will be shared across\nall instances of the class. To avoid this, add an entry for that item with a\n<code>NULL<\/code> initial value, and then in the <code>initialize<\/code> method,\ninstantiate the object and assign it.<\/p>","package":{"package":"R6","version":"2.5.0"}}
{"name":"as.list.R6","title":"Create a list from an R6 object","pagetitle":"Create a list from an R6 object â€” as.list.R6","source":"Source: <a href='https://github.com/r-lib/R6/blob/HEAD/R/aslist.R'><code>R/aslist.R<\/code><\/a>","filename":"as.list.R6.Rd","author":[],"aliases":"as.list.R6","keywords":[],"description":"<p>This returns a list of public members from the object. It simply calls\n<code>as.list.environment<\/code>.<\/p>","opengraph":{"description":"This returns a list of public members from the object. It simply calls\nas.list.environment."},"usage":{"title":"Usage","contents":"<div class='sourceCode'><pre class='sourceCode r'><code><span class='co'># S3 method for R6<\/span>\n<span class='fu'><a href='https://rdrr.io/r/base/list.html'>as.list<\/a><\/span><span class='op'>(<\/span><span class='va'>x<\/span>, <span class='va'>...<\/span><span class='op'>)<\/span><\/code><\/pre><\/div>"},"sections":[{"title":"Arguments","contents":"<dl>\n\n<dt>x<\/dt>\n<dd><p>An R6 object.<\/p><\/dd>\n\n\n<dt>...<\/dt>\n<dd><p>Other arguments, which will be ignored.<\/p><\/dd>\n\n<\/dl>"}],"package":{"package":"R6","version":"2.5.0"}}
{"name":"is.R6","title":"Is an object an R6 Class Generator or Object?","pagetitle":"Is an object an R6 Class Generator or Object? â€” is.R6","source":"Source: <a href='https://github.com/r-lib/R6/blob/HEAD/R/is.R'><code>R/is.R<\/code><\/a>","filename":"is.R6.Rd","author":[],"aliases":["is.R6","is.R6Class"],"keywords":[],"description":"<p>Checks for R6 class generators and R6 objects.<\/p>","opengraph":{"description":"Checks for R6 class generators and R6 objects."},"usage":{"title":"Usage","contents":"<div class='sourceCode'><pre class='sourceCode r'><code><span class='fu'>is.R6<\/span><span class='op'>(<\/span><span class='va'>x<\/span><span class='op'>)<\/span>\n\n<span class='fu'>is.R6Class<\/span><span class='op'>(<\/span><span class='va'>x<\/span><span class='op'>)<\/span><\/code><\/pre><\/div>"},"examples":"<div class='sourceCode'><pre class='sourceCode r'><code><span class='va'>class_generator<\/span> <span class='op'>&lt;-<\/span> <span class='kw'>R6Class<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n<span class='va'>object<\/span> <span class='op'>&lt;-<\/span> <span class='va'>class_generator<\/span><span class='op'>$<\/span><span class='fu'>new<\/span><span class='op'>(<\/span><span class='op'>)<\/span>\n\n<span class='fu'>is.R6Class<\/span><span class='op'>(<\/span><span class='va'>class_generator<\/span><span class='op'>)<\/span>\n<span class='fu'>is.R6<\/span><span class='op'>(<\/span><span class='va'>class_generator<\/span><span class='op'>)<\/span>\n\n<span class='fu'>is.R6Class<\/span><span class='op'>(<\/span><span class='va'>object<\/span><span class='op'>)<\/span>\n<span class='fu'>is.R6<\/span><span class='op'>(<\/span><span class='va'>object<\/span><span class='op'>)<\/span>\n<\/code><\/pre><\/div>","sections":[{"title":"Arguments","contents":"<dl>\n\n<dt>x<\/dt>\n<dd><p>An object.<\/p><\/dd>\n\n<\/dl>"}],"value":"\n\n<p>A logical value.<\/p><ul>\n<li><p><code>is.R6Class<\/code> returns <code>TRUE<\/code> when the input is an R6 class\ngenerator and <code>FALSE<\/code> otherwise.<\/p><\/li>\n<li><p><code>is.R6<\/code> returns <code>TRUE<\/code> when the input is an R6 object and\n<code>FALSE<\/code> otherwise.<\/p><\/li>\n<\/ul>\n\n","package":{"package":"R6","version":"2.5.0"}}
